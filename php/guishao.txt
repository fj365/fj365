就会发现取出了 255,255,255的全白色。

于是：我们改进一下函数：

function imgColor($imgUrl)
{
	$imageInfo = getimagesize($imgUrl);
	$imgType   = strtolower(substr(image_type_to_extension($imageInfo[2]), 1));
	$imageFun  = 'imagecreatefrom' . ($imgType == 'jpg' ? 'jpeg' : $imgType);
	$i         = $imageFun($imgUrl);
	$rColorNum = $gColorNum = $bColorNum = $total = 0;
	for ($x = 50; $x < imagesx($i) - 50; $x++) {
		for ($y = 50; $y < imagesy($i) - 50; $y++) {
			$rgb = imagecolorat($i, $x, $y);
			$r   = ($rgb >> 16) & 0xFF;
			$g   = ($rgb >> 8) & 0xFF;
			$b   = $rgb & 0xFF;
			$rColorNum += $r;
			$gColorNum += $g;
			$bColorNum += $b;
			$total++;
		}
	}
	$rgb      = array();
	$rgb['r'] = round($rColorNum / $total);
	$rgb['g'] = round($gColorNum / $total);
	$rgb['b'] = round($bColorNum / $total);
	return $rgb;
}
$rgb = imgColor("图片地址");
print_r($rgb); //将打印出一个数组 
 
/**
* x=50 
* imagesx($i) - 50
* y=50
* imagesy($i) - 50
* 相当于 margin 属性 
**/


我们发现取色正常了。如果不是很正常依然可以调大数值。



根据图片色系来生成一个对应的字体：

$gray      = '255,255,255';
$grayLevel = $img['r'] * 0.299 + $img['g'] * 0.587 + $img['b'] * 0.114;
if ($grayLevel >= 150) {
	$gray = '0,0,0';
}PHP中取图片色系并生成跟图片反色差的字体
原取图片色系：

function imgColor($imgUrl)
{
	$imageInfo = getimagesize($imgUrl);
	$imgType   = strtolower(substr(image_type_to_extension($imageInfo[2]), 1));
	$imageFun  = 'imagecreatefrom' . ($imgType == 'jpg' ? 'jpeg' : $imgType);
	$i         = $imageFun($imgUrl);
	$rColorNum = $gColorNum = $bColorNum = $total = 0;
	for ($x = 0; $x < imagesx($i); $x++) {
		for ($y = 0; $y < imagesy($i); $y++) {
			$rgb = imagecolorat($i, $x, $y);
			$r   = ($rgb >> 16) & 0xFF;
			$g   = ($rgb >> 8) & 0xFF;
			$b   = $rgb & 0xFF;
			$rColorNum += $r;
			$gColorNum += $g;
			$bColorNum += $b;
			$total++;
		}
	}
	$rgb      = array();
	$rgb['r'] = round($rColorNum / $total);
	$rgb['g'] = round($gColorNum / $total);
	$rgb['b'] = round($bColorNum / $total);
	return $rgb;
}
 
$rgb = imgColor("图片地址");
print_r($rgb); //将打印出一个数组
根据函数我们可以理解到，此函数运行时会依次遍历所有的像素点。然后取出现最多的像素点。



CRC32参数加密JS、php版-参数完整性验证

    CRC32/CRC16于md5一样都是不可逆的加密函数，用于密码验证或者数据完整性检查。


JS 版本：

	function CRC32(str){    
		str=encodeURIComponent(str);    
		var Crc32Table=new Array(256);    
		var i,j;    
		var Crc;    
		for(i=0; i<256; i++)    
		{    
			Crc=i;    
			for(j=0; j<8; j++)    
			{    
				if(Crc & 1)    
					Crc=((Crc >> 1)& 0x7FFFFFFF) ^ 0xEDB88320;    
				else    
					Crc=((Crc >> 1)& 0x7FFFFFFF);    
			}    
			Crc32Table[i]=Crc;    
		}    
		if (typeof str != "string") str = "" + str;    
		Crc=0xFFFFFFFF;    
		for(i=0; i<str.length; i++)    
			Crc=((Crc >> 8)&0x00FFFFFF) ^ Crc32Table[(Crc & 0xFF)^ str.charCodeAt(i)];    
		Crc ^=0xFFFFFFFF;    
		return (Crc >> 3).toString(16);    
	}


PHP 版本（源自网络）

function co($f) {
            $d =  Array();  
            $e = '';  
            $c = '';  
            $b = '';  
            for ($e = 0; $e < 256; $e++) {  
                $b = $e;  
                for ($c = 0; $c < 8; $c++) {  
                    if ($b & 1) {  
                        $b = (($b >> 1) & 2147483647) ^ 3988292384;  
                    } else {  
                        $b = (($b >> 1) & 2147483647);  
                    }  
                }  
                $d[$e] = $b;  
            }  
            if (!is_string($f)) {  
                $f = "" + $f;  
            }  
            $b = 4294967295;  
            for ($e = 0; $e < strlen($f); $e++) {  
                $b = (($b >> 8) & 16777215) ^ $d[($b & 255) ^ get_bianma(substr($f, $e, 1))];  
            }  
            $b ^= 4294967295;//         $b = $b ^ 4294967295;  
            $fuhao = (  !is_numeric(substr( $b >> 3, 0, 1 ))  ) ?  substr( $b >> 3, 0, 1 ) : '' ;  
            return $fuhao.base_convert($b >> 3,10,16);//base_convert会去掉（$b >> 3）的负号,这里不要用dechex()转换为16进制  
        }  
        function get_bianma($str)//等同于js的charCodeAt()  
    {  
        $result = array();  
        for($i = 0, $l = mb_strlen($str, 'utf-8');$i < $l;++$i)  
        {  
            $result[] = uniord(mb_substr($str, $i, 1, 'utf-8'));  
        }  
        return join(",", $result);  
    }  
    function uniord($str, $from_encoding = false)  
    {  
        $from_encoding = $from_encoding ? $from_encoding : 'UTF-8';  
        if (strlen($str) == 1)  
            return ord($str);  
        $str = mb_convert_encoding($str, 'UCS-4BE', $from_encoding);  
        $tmp = unpack('N', $str);  
        return $tmp[1];  
    }

（PHP版本都可按套路推出，以上代码不代表标准版本）
